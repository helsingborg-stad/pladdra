type S3Object {
  bucket: String!
  key: String!
  region: String!
}

type Vect3 {
  x: Int!
  y: Int!
  z: Int!
}

type Quat {
  x: Int!
  y: Int!
  z: Int!
  w: Int!
}

input S3ObjectInput {
  bucket: String!
  key: String!
  region: String!
  localUri: String
  mimeType: String
  url: String
  _url: String
}

enum AssetType {
  MESH
}

enum AssetFileFormat {
  GLTF
  GLB
  OBJ
  FBX
  DWG
}

type Asset
  @model
  @auth(
    rules: [
      { allow: private }
      { allow: public, provider: apiKey, operations: [read] }
    ]
  )
  @key(
    name: "byFileFormat"
    fields: ["fileFormat", "createdAt", "updatedAt"]
    queryField: "assetsByFileFormat"
  ) {
  id: ID!
  name: String!
  type: AssetType!
  fileFormat: AssetFileFormat!
  fileName: String!
  fileSize: Int!
  file: S3Object!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input CreateAssetInput {
  id: ID
  name: String!
  type: AssetType!
  fileFormat: AssetFileFormat!
  fileName: String!
  fileSize: Int!
  file: S3ObjectInput!
  description: String
}

type Block
  @model
  @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey }])
  @key(
    name: "blocksByWorkspace"
    fields: ["workspaceID", "updatedAt", "createdAt"]
  ) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  workspaceID: ID!
  assetID: ID!
  position: Vect3!
  rotation: Quat!
}

type Workspace
  @model
  @auth(rules: [{ allow: owner }, { allow: public, provider: apiKey }]) {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  description: String
  blocks: [Block!]! @connection(keyName: "blocksByWorkspace", fields: ["id"])
}
